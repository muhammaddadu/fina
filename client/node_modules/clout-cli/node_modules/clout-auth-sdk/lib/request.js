/**
 * Clout Auth Library
 */
var _ = require('lodash'),
	request = require('request'),
	debug = require('debug')('clout-auth:request');

module.exports = function requestExports(auth) {
	var config = auth.config;
	function createRequest(type, opts, cb) {
		var pth = config.paths[type],
			url = config.baseUrl + pth[1];
		debug('createRequest:%s:%s', type, JSON.stringify(opts));
		debug('url: %s', url);
		var req = {
			url: url,
			method: pth[0],
			json: true,
			headers: {
				'user-agent': 'clout-auth library'
			}
		};
		if (opts.session) {
			var jar = request.jar();
			Object.keys(opts.session).forEach(function (key) {
				var value = opts.session[key];
				jar.setCookie(key + '=' + value, config.baseUrl);
			});
			req.jar = jar;
		}

		if (opts.body) {
			req.body = opts.body;
		}

		request(req, function (error, response, body) {
			debug('request:%s:%s', type, JSON.stringify(opts));
			debug('error: %s', error);
			debug('response: %s', JSON.stringify(response));
			debug('body: %s', JSON.stringify(body));
			if (body.success === false) {
				return cb(body.data);
			}
			var session = {};
			// if using cookies
			if (response.headers.hasOwnProperty('set-cookie')) {
				// get required cookies
				config.session.forEach(function (key) {
					response.headers['set-cookie'].forEach(function (value) {
						var exp = new RegExp(key + '=(.*)');
						if (exp.test(value)) {
							session[key] = exp.exec(value)[1];
							debug('session:%s:%s', key, session[key]);
						}
					});
				});
			}
			cb(null, body.data, session);
		});
	}
	auth.request = {
		login: function (opts, cb) {
			createRequest('login', {body: opts}, cb);
		},
		whoami: function (opts, cb) {
			createRequest('whoami', {session: opts}, cb);
		},
		logout: function (opts, cb) {
			createRequest('logout', {session: opts}, cb);
		}
	}
};
