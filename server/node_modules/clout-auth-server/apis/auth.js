/**
 * Clout Auth Server
 */
var passport = require('passport'),
	_ = require('lodash'),
	async = require('async'),
	debug = require('debug')('clout-auth-server:api/auth');

module.exports = {
	login: {
		path: '/login',
		description: 'clout auth login',
		method: 'post',
		params: {
			email: ['email', 'string', 'clout email'],
			password: ['password', 'string', 'password assosiated with email'],
		},
		// hooks: [passport.authenticate('local')],
		fn: function login(req, res, next) {
			debug('passport.authenticate:local');
			passport.authenticate('local', function(err, user, info) {
				if (err) { debug(err); return next(err); }
				if (!user) {
					debug('Invalid Username or Password');
					return res.unauthorized('Invalid Username or Password');
				}
				debug('req.login');
				req.login(user, function (err) {
					if (err) { debug(err); return next(err); }
					debug('logged in');
					res.success(user.toJson()); // return the user object as a response
				});
			}).apply(this, arguments);
		}
	},
	logout: {
		path: '/logout',
		description: 'clout auth logout',
		method: 'get',
		fn: function logout(req, res, next) {
			req.logout();
			res.success();
		}
	},
	register: {
		path: '/register',
		description: 'register clout account',
		method: 'post',
		params: {
			'email': ['email', 'string', ''],
			'password': ['password', 'string', ''],
			'firstName': ['firstName', 'string', ''],
			'lastName': ['lastName', 'string', ''],
			'org_id': ['org_id', 'integer', ''],
			'org_name': ['org_name', 'string', '']
		},
		fn: function register(req, res, next) {
			var user = _.merge({}, req.body, req.query);
			debug('register user: %s', JSON.stringify(user));

		    var requiredFields = ['email', 'password', 'firstName', 'lastName'];
		    for (var i in requiredFields) {
		    	var requiredField = requiredFields[i];
		    	if (!user[requiredField]) {
		    		debug('required field `%s` missing', requiredField);
		    		return res.badRequest('Required field `' + requiredField + '` missing');
		    	}
		    }

			// only accept org_id if user is staff or logged into the org
			if (user.org_id && !(req.user.isStaff || req.user.org_id === user.org_id)) {
				debug('delete user.org_id as unauthorized');
				delete user.org_id;
			}

			async.series([
				function makeSureUserDeosNotExit(done) {
					req.models.User.findByEmail(user.email, function(err, user) {
						if (err) { debug(err); return next(err); }
						if (user) {
							debug('User already exists');
							return res.badRequest('User already exists');
						}
						done();
					});
				},
				function createOrgIfNeeded(done) {
					if (user.org_id) { return done(); }
					var orgName = user.org_name || user.firstName + ' ' + user.lastName;
					debug('orgName: %s', orgName);
					req.models.Organization.create({ name: orgName }).then(function (org) {
						user.org_id = org.id;
						debug('org: %s', org);
						done();
					}, function (err) {
						debug(err); return next(err);
					});
				}
			], function register() {
				debug('creating user: %s', user);
				req.models.User.register(user, function (err, newUser) {
					if (err) { debug(err); return req.badRequest(err); }
					debug('new user: %s', user);
					res.success(newUser.toJson()); // return the user object as a response
				});
			});
		}
	},
	whoami: {
		path: '/whoami',
		description: 'returns information about the current session',
		method: 'get',
		fn: function whoami(req, res, next) {
			if (!req.user) {
				return res.badRequest('You are not logged in');
			}
			res.success(req.user.toJson()); // return the user object as a response
		}
	}
};
