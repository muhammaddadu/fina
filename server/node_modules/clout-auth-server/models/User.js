/**
 * User Model
 */
var clout = require('clout-js'),
	Sequelize = clout.Sequelize,
	sequelize = clout.sequelize,
	_ = require('lodash'),
	crypto = require('crypto');

function createHash(text) {
	var shasum = crypto.createHash('sha1');
	shasum.update(text);
	return shasum.digest('hex');
}

var definition = {
		org_id: { type: Sequelize.INTEGER, allowNull: false },
		firstName: { type: Sequelize.STRING, allowNull: false },
		lastName: { type: Sequelize.STRING, allowNull: false },
		email: { type: Sequelize.STRING, allowNull: false, validate: { isEmail: true } },
		password: { 
			type: Sequelize.STRING, allowNull: false,
			set: function (value) {
				value = createHash(value);
				this.setDataValue('password', value);
			}
		},
		resetToken: { type: Sequelize.STRING, allowNull: true },
		status: {
			type:   Sequelize.ENUM,
    		values: ['active', 'pending', 'deactivated'],
    		allowNull: false,
    		defaultValue: 'active'
		},
		isStaff: { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false }
	},
	props = {
		getterMethods : {
			fullName : function getFullName() { 
				return this.firstName + ' ' + this.lastName; 
			}
		},
		instanceMethods: {
			authenticate: function authenticate(password, cb) {
				if (this.password !== createHash(password)) {
					return cb(null, null, { message: 'Invalid Password' });
				}
				cb(null, this);
			},
			toJson: function toJson() {
				var userCpy = JSON.parse(JSON.stringify(this));
				userCpy.password && (delete userCpy.password);
				userCpy.resetToken && (delete userCpy.resetToken);
				return userCpy;
			}
		}
	},
	User = sequelize.define('User', definition, props);

User.serializeUser = function serializeUser() {
	return function (user, cb) {
		cb(null, user.get('email')|| null);
	};
};

User.deserializeUser = function deserializeUser() {
	var self = this;
	return function (email, cb) {
		self.findByEmail(email, cb);
	};
};

User.authenticate = function authenticate() {
	var self = this;
	return function (email, password, cb) {
		self.findByEmail(email, function (err, user) {
			if (err) { return cb(err); }
			if (!user) {
				return cb(null, null, { message: 'Incorrect Email' });
			}
			return user.authenticate(password, cb);
		});
	};
};

User.findByEmail = function findByEmail(email, cb) {
	this.find({ 
		where: { 'email': email.toLowerCase() } 
	}).then(function (user) {
		cb(null, user);
	}, function (err) {
		cb(err);
	});
};

User.register = function register(user, next) {
    if (!_.isObject(user)) {
    	res.badRequest({message: 'Bad Request'});
    }
    // Create an instance
    user = this.build(user);

    this.findByEmail(user.get('email'), function (err, existingUser) {
		if (err) { return next(err); }

		if (existingUser) {
			return next('User already exists');
		}

		user.save()
			.then(function() {
				next(null, user);
			}, function (err) {
				return next(err);
			});
	});
}

module.exports = User;

