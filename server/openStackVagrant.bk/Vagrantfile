# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "precise64"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "http://files.vagrantup.com/precise64.box"

  # Create a forwarded port mapping which allows access to a specific port
  config.vm.network :forwarded_port, guest: 80, host: 8880 # map 80 -> 8880
  config.vm.network :forwarded_port, guest: 8082, host: 8882 # auth server
  config.vm.network :forwarded_port, guest: 8083, host: 8883 # services server

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network :private_network, ip: "192.168.2.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  
  # Give the guest OS access to the user's home dir for .ssh keys and so on.
  # Enable nfs for faster performance. Ingored on Windows host.
  config.vm.synced_folder "../../", "/clout", nfs: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider :virtualbox do |vb|
    # Don't boot with headless mode
    # vb.gui = true
  
    # Use VBoxManage to customize the VM. For example to change memory:
    vb.customize ["modifyvm", :id, "--memory", "4096"]
    vb.customize ["modifyvm", :id, "--cpus", "4"]
    vb.customize ["modifyvm", :id, "--ioapic", "on"]
  end
  
  # View the documentation for the provider you're using for more
  # information on available options.
  # http://anteaya.info/blog/2013/09/01/installing-devstack-with-vagrant/

  # For now we'll use basic shell provisioning script:
  config.vm.provision :shell, inline: "touch /etc/is_vagrant_vm"
  # config.vm.provision :shell, :path => "../scripts/install.sh"
  # http://getcloudify.org/2014/05/13/devstack-vagrant-tutorial-localrc.html
  # http://getcloudify.org/2013/12/23/setting_up_devstack_havana_on_your_local_network.html
  # fix installation errros
  # http://pkgs.fedoraproject.org/repo/pkgs/libvirt/libvirt-1.0.6.tar.gz/a4a09a981f902c4d6aa5138c753d64fd/libvirt-1.0.6.tar.gz
  # http://askubuntu.com/questions/635170/libvirt-python-stopped-installation-of-devstack-using-stack-sh-under-ubuntu-12-0
  # http://blog.scottlowe.org/2012/11/05/compiling-libvirt-1-0-0-on-ubuntu-12-04-and-12-10/
  # https://bugs.launchpad.net/ubuntu/+source/libvirt/+bug/565771
  # sudo apt-get install -y libcurl4-gnutls-dev libnl-route-3-dev w3c-dtd-xhtml libdevmapper-dev libpciaccess-dev make
  # https://www.redhat.com/archives/libvirt-users/2015-March/msg00017.html
  # http://pkgs.fedoraproject.org/repo/pkgs/libvirt/
  # https://rpmfind.net/linux/RPM/opensuse/updates/12.3/x86_64/libvirt-devel-1.0.2-1.22.1.x86_64.html Need certain version
  # https://wiki.openstack.org/wiki/Docker
  # https://bugs.launchpad.net/solum/+bug/1390246 #6
end
